// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: js7xbhyMDXu3U4xUyjvjor
// Component: -Ea7nJbv4LT
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: c29AL5vCZlog/component
import { useScreenVariants as useScreenVariantscs1189Nl9NXb } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: CS1189Nl9nXB/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_roxborough_greens.module.css"; // plasmic-import: js7xbhyMDXu3U4xUyjvjor/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: -Ea7nJbv4LT/css
import LogoIcon from "./icons/PlasmicIcon__Logo"; // plasmic-import: jwetpln2842F/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: 8qi_tbW2QVX3/icon
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: TQFP_ilZ5Pvd/icon

export const PlasmicHeader__VariantProps = new Array();

export const PlasmicHeader__ArgProps = new Array();

function PlasmicHeader__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantscs1189Nl9NXb()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <p.PlasmicLink
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(projectcss.a, sty.link)}
        component={Link}
        href={"/"}
        platform={"nextjs"}
      >
        {true ? (
          <LogoIcon
            className={classNames(projectcss.all, sty.svg__xuAgc)}
            role={"img"}
          />
        ) : null}

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___2PZv
          )}
        >
          {"Roxburough Greens"}
        </div>
      </p.PlasmicLink>

      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <Button
          className={classNames("__wab_instance", sty.button__frQd3)}
          color={"clear"}
          endIcon={
            <SearchsvgIcon
              className={classNames(projectcss.all, sty.svg___1Gi8B)}
              role={"img"}
            />
          }
          link={"/info"}
          size={"compact"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__glo3Q
            )}
          >
            {"Info"}
          </div>
        </Button>

        <Button
          className={classNames("__wab_instance", sty.button__v6Cce)}
          color={"clear"}
          endIcon={
            <RightArrowIcon
              className={classNames(projectcss.all, sty.svg___14Yke)}
              role={"img"}
            />
          }
          link={"/contact"}
          size={"compact"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__sfka7
            )}
          >
            {"Contact"}
          </div>
        </Button>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "link", "freeBox"],
  link: ["link"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeader__ArgProps,
      internalVariantPropNames: PlasmicHeader__VariantProps
    });

    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
